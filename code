#include <opencv2/opencv.hpp>
#include <iostream>
#include <string>
#include <math.h>

using namespace cv;
using namespace std;

int main()
{
	Mat img1=imread("E://0235.tif",0);
	do
	{
		char m[100];
		cout << "请输入图片路径：" << endl;
		cin.getline(m, 100);
		img1 = imread(m, 0);
	} while (img1.empty());
	int a, b;
	cout << "滤波器边长:" << endl;
	cin >> a;
	cout << "请输入阈值(0~255):" << endl;
	cin >> b;
	Mat img2;// (img1.size(), CV_8UC1);
	Mat img3; (img1.size(), CV_32FC1);
	Mat img4; (img1.size(), CV_32FC1);
	Mat img5,img6,img7;
	blur(img1, img2, Size(a,a),Point(-1,-1));//平滑
	//imwrite("F://平滑图像.tif", img2);
	Sobel(img2, img3, img2.depth(), 0, 1, 3, 1);
	Sobel(img2, img4, img2.depth(), 1, 0, 3, 1);//sobel算子计算第一次
	convertScaleAbs(img3, img3);
	convertScaleAbs(img4, img4);//取绝对值
	addWeighted(img3, 0.5, img4, 0.5, 0, img5);//合并x,y
	Sobel(img2, img3, img2.depth(), 0, 1, 3, -1);
	Sobel(img2, img4, img2.depth(), 1, 0, 3, -1);//sobel算子计算第二次（反向）
	convertScaleAbs(img3, img3);
	convertScaleAbs(img4, img4);//取绝对值
	addWeighted(img3, 0.5, img4, 0.5, 0, img6);//合并x,y
	addWeighted(img5, 0.5, img6, 0.5, 0, img7);//两次计算结果合并
	normalize(img7, img7, 0, 255, NORM_MINMAX);//重映射
	//imwrite("F://梯度图像.tif", img7);
	//阈值处理
	for (int i = 0; i < img7.rows; i++)
	{
		for (int j = 0; j < img7.cols; j++)
		{
			if (img7.at<uchar>(i, j) > b)
			{
				img7.at<uchar>(i, j) = 255;
			}
			else
			{
				img7.at<uchar>(i, j) = 0;
			}
		}
	}
	imwrite("F://最终图像.tif", img7);
	imshow("最终图像", img7);
	waitKey();
	return 0;
} 
